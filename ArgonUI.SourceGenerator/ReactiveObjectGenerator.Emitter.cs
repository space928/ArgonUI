using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;

namespace ArgonUI.SourceGenerator;

public partial class ReactiveObjectGenerator
{
    private static void Emit(SourceProductionContext context, ReactiveObjectResult result)
    {
        if (result.Diagnostic != null)
            context.ReportDiagnostic(result.Diagnostic);
        if (result.Class is not ReactiveObjectClass model)
            return;

        IndentedStringBuilder sb = new();

        sb.AppendLine("""
            // <auto-generated/>
            /**************************************************|
            | This file is automatically generated by ArgonUI. |
            |**************************************************/

            """);

        sb.AppendLine($"namespace {model.Namespace};");
        sb.AppendLine();

        if (model.EnableNullable)
        {
            sb.AppendLine("#nullable enable");
            sb.AppendLine();
        }

        sb.AppendLine($"{model.Accessibility.GetText()} partial class {model.ClassName}");
        using (sb.EnterCurlyBracket())
        {
            foreach (var prop in model.ReactiveFields)
            {
                // Generate a property
                if (!string.IsNullOrEmpty(prop.DocComment))
                    PrintDocComment(sb, prop.DocComment!);
                sb.AppendLine($"public {prop.FieldType} {prop.PropName}");
                using (sb.EnterCurlyBracket())
                {
                    // Getter
                    if (prop.OnGetFunc != null)
                        sb.AppendLine($"get => {prop.OnGetFunc}();");
                    else
                        sb.AppendLine($"get => {prop.FieldName};");

                    // Setter
                    sb.AppendLine($"set");
                    using (sb.EnterCurlyBracket())
                    {
                        //sb.AppendLine($"{prop.FieldName} = value;");
                        if (prop.OnSetAction != null)
                        {
                            sb.AppendLine($"OnChanging(\"{prop.PropName}\");");
                            sb.AppendLine($"{prop.OnSetAction}(value);");
                            sb.AppendLine($"OnChanged(\"{prop.PropName}\");");
                        }
                        else
                        {
                            string prefix = string.Empty;
                            if (prop.FieldName == "value")
                                prefix = "this.";
                            sb.AppendLine($"UpdateProperty(ref {prefix}{prop.FieldName}, value);");
                        }
                        if (prop.DirtyFlags != UIElements.DirtyFlags.None)
                        {
                            sb.AppendLine($"Dirty(ArgonUI.UIElements.DirtyFlags.{prop.DirtyFlags});");
                        }
                    }
                }
                sb.AppendLine();
            }
        }

        var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

        context.AddSource($"{model.ClassName}_ReactiveObject.g.cs", sourceText);
    }

    private static void PrintDocComment(IndentedStringBuilder sb, string docComment)
    {
        /* Example docComment
<member name="F:ArgonUI.SourceGenerator.Test.ReactiveTest.test4">
    <summary>
    An example property.
    </summary>
</member>
        */

        // Lets be lazy and just strip out the first and last lines (<member> tags)
        // In the future we may want to optimise this to reduce allocations.
        var lines = docComment.Split('\n');
        foreach (var line in lines.Skip(1).Take(lines.Length - 3))
        {
            sb.AppendIndent().Append("/// ").Append(line.TrimStart(' ')).AppendLine();
        }
    }
}
